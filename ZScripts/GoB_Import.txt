/*
name: GoB_Import.zsc 
description: Zbrush script for Blender GoB addon
tracker_url: https://github.com/JoseConseco/GoB
author: Daniel Grauer
version: 1.0.0
*/

[VarDef,GoBImport,0]
[VarDef,timer,-1]
[VarDef,debug,0]




[IButton,CreateList,"Do it",
	[VarSet,myList(0),"apples"]
	[VarSet,myList(1),"oranges"]
	[VarSet,myList(2),"pears"]
	[VarSet,myList(3),"bananas"]
	[VarSet,myList(4),"lemons"]
	[VarSet,saved,[VarSave,myList,"MySavedList.zvr"]]
	[If,saved,//if value greater than 0
		[Note,"MyList saved!"]
		,
		[Note,"Error - no values saved!"]
	]	
]

[IButton,LoadList,"Do it",	
	[If,[FileExists,"MySavedList.zvr"],
		[VarLoad,myList,"MySavedList.zvr"]
	]
	[Loop,5,
		[Note,[StrMerge,myList([Var,n]),"\n"],,-1]//Note duration of -1 displays with next note
	,n]
	[Note,""]
]



[If,GoBImport==0, //make sure this runs when loaded

    [VarDef,gozPath,""]
    [RoutineDef,AdjustPath,//replace backslashes with forward slashes
        [VarDef,pathStr,""]
        [Loop,999,
            [VarSet,in,[StrFind,[StrFromAsc,92],pathStr]]
            [If,[Val,in] > -1,//"
                [VarSet,pathStr,[StrMerge,[StrExtract,pathStr,0,[Val,in-1]],"/",[StrExtract,pathStr,[Val,in+1],[StrLength,pathStr]]]]
                ,
                [LoopExit]
            ]		
        ]
    ,pathStr]

    [RoutineDef,GetFullPath,	
        [VarSet,path,[FileNameResolvePath,path]]
        [If,[ZBrushInfo,6],//is MacOS
            //adjust for Mac OSX
            [VarSet,path,[StrExtract,path,2,256]]
        ]
    ,path]

    [VarSet,publicPath,[FileNameExtract,[FileNameResolvePath,"ZPUBLIC_ZPluginData/"],1]]
    [RoutineCall,AdjustPath,publicPath]//just as Notes don't display backslashes!
    [Note,[StrMerge, "\nThe ZBrush Data folder path is: \n    ", publicPath],,timer]

	[If,[ZBrushInfo,6],//is MacOS
	 	[If,[StrFind,"Shared",publicPath]>-1,
		 	[VarSet,gozPath,[StrExtract,publicPath,0,([StrFind,"Shared",publicPath]+6)]]
		 	[VarSet,gozPath,[StrMerge,gozPath,"Pixologic/GoZProjects/Default/"]]	
            [Note,[StrMerge, "\nThe GoZ Projects path is: \n    ", gozPath],,timer]
		 ]	 	
	 	//note that ZBrush paths on MacOS start with "!:"
	 	//this needs to be removed if passing paths to dynamic libraries etc. - see GetFullPath routine above
	 	,//else Windows
		 [If,[StrFind,"Documents",publicPath]>-1,
		 	[VarSet,gozPath,[StrExtract,publicPath,0,([StrFind,"Documents",publicPath]-1)]]
		 	[VarSet,gozPath,[StrMerge,gozPath,"Pixologic/GoZProjects/Default/"]]
		 	[RoutineCall,AdjustPath,gozPath]
            [Note,[StrMerge, "\nThe GoZ Projects path is: \n    ", gozPath],,timer]
		 ]
	]




    [VarDef,diffSuffix, "_diff"]
    [VarDef,dispSuffix, "_disp"]
    [VarDef,normSuffix, "_norm"]

    [VarDef,objectNameFile,[StrMerge,gozPath,"GoB_objectName.zvr"]]     //define config file  
    [VarDef,fileExtensionFile,[StrMerge,gozPath,"GoB_fileExtension.zvr"]]
    [VarDef,textureFormatFile,[StrMerge,gozPath,"GoB_textureFormat.zvr"]]
    [VarDef,diffTextureFile,[StrMerge,gozPath,"GoB_diffTexture.zvr"]]
    [VarDef,normTextureFile,[StrMerge,gozPath,"GoB_normTexture.zvr"]]
    [VarDef,dispTextureFile,[StrMerge,gozPath,"GoB_dispTexture.zvr"]]
        
    [VarDef, object(1),""]//create config size
    [If,[FileExists,objectNameFile],
        [VarLoad,object,objectNameFile]//load config file 
        [VarDef,objectName,[StrMerge, object(0),""]]
        [Note,[StrMerge, "\nObject Name: ", objectName],,timer]
    ] 
    [VarDef, extension(1),""]//create config size
    [If,[FileExists,fileExtensionFile], 
        [VarLoad,extension,fileExtensionFile]//load config file 
        [VarDef,fileExtension,[StrMerge, extension(0),""]]
        [Note,[StrMerge, "\n    File Extension: ", fileExtension],,timer]
    ]
    [VarDef, format(1),""]//create config size
    [If,[FileExists,textureFormatFile],
        [VarLoad,format,textureFormatFile]//load config file 
        [VarDef,textureFormat,[StrMerge, format(0),""]]
        [Note,[StrMerge, "\n    Texture Format : ", textureFormat],,timer]
    ] 
    [VarDef,diff(1),""]//create config size
    [If,[FileExists,diffTextureFile],
        [VarLoad,diff,diffTextureFile]//load config file 
        [VarDef,diffTexture,[StrMerge,diff(0),""]]
        [Note,[StrMerge,"\n    diffTexture : ",diffTexture],,timer]
    ] 
    [VarDef,norm(1),""]//create config size
    [If,[FileExists,normTextureFile],
        [VarLoad,norm,normTextureFile]//load config file 
        [VarDef,normTexture,[StrMerge,norm(0),""]]
        [Note,[StrMerge,"\n    normTexture : ",normTexture],,timer]
    ] 
    [VarDef,disp(1),""]//create config size
    [If,[FileExists,dispTextureFile],
        [VarLoad,disp,dispTextureFile]//load config file 
        [VarDef,dispTexture,[StrMerge,disp(0),""]]
        [Note,[StrMerge,"\n    dispTexture : ",dispTexture],,timer]
    ] 



    [VarDef,objectPath,[StrMerge,gozPath,objectName,fileExtension]]
    [VarDef,subtoolIndex, -1]// replace with subtool index if subtool already exists  

    [RoutineDef,FindSubtool,
        [VarDef,subtoolName,""]// Define a new variable to store the current subtool name 
        [VarSet,totalSubtools,[SubToolGetCount]]// create a variable to define the number of loop based on the subtools count
        [SubToolSelect,0]// select first subtool
        [VarSet,activeSubtool,[SubToolGetActiveIndex]]// create a variable with the current subtool Index

        [Loop,totalSubtools,//loop over subtools
            [SubToolSelect,[Val,activeSubtool]]
            [VarSet,subtoolName,[IGetTitle,"Tool:ItemInfo"]]//get the subtool name
            [VarSet,subtoolName,[StrExtract,subtoolName,0,[StrLength,subtoolName]-2]]// trim chars from the end.
            //[Note,[StrMerge,"Subtool Name: ",subtoolName, "\nTarget Object",  objectName],,timer]
            [If,subtoolIndex == -1,
                [If,([StrFind,subtoolName,objectName]==0) && ([StrLength,subtoolName]==[StrLength,objectName]),   // subtool not found,create a new one                 
                    [VarSet,subtoolIndex, activeSubtool]   
                    [LoopExit]
                    //[Note,[StrMerge,"subtool found: ",subtoolName, ", index: ",  subtoolIndex],,timer]
                ]
            ]        
            //[Note, [StrMerge,activeSubtool, " activeSubtool: ",subtoolName],,timer]//displays message for 1 second
            [VarInc, activeSubtool]//adds 1 to the loop counter
        ]
    ]//end Routine  


    [RoutineDef,LoadTextures,
        // import textures
        [If,[FileExists,diffTexture],
            [IPress,Tool:Texture Map:TextureMap]
            [FileNameSetNext,diffTexture] [IPress,Texture:Import]
            [Note, [StrMerge, "\n   Load Texture: ", diffTexture],, timer]
        ]
        [If,[FileExists,dispTexture],
            [IPress,Tool:Displacement Map:DisplacementMap]
            [FileNameSetNext,dispTexture] [IPress,Alpha:Import]
            [Note, [StrMerge, "\n   Load Texture: ", dispTexture],, timer]
        ]
        [If,[FileExists,normTexture],            
            [IPress,Tool:Normal Map:Normal Map]
            [FileNameSetNext,normTexture] [IPress,Texture:Import]
            [Note, [StrMerge, "\n   Load Texture: ", normTexture],, timer]
        ]
    ]//end Routine 
    [RoutineCall,FindSubtool]


    [If,subtoolIndex == -1,    
        // subtool exists,update subtool 
        [Note,[StrMerge,"\n\nCreating new Subtool: ",objectName,"  id: ",subtoolIndex, " ", [ToolGetActiveIndex]," ", [ToolGetCount]] ,,timer] 
        
        [Note,[StrMerge,"\nToolGetSubToolID: ",[ToolGetSubToolID],""],,timer]
        [If,[ToolGetSubToolID] == 0, //tool cant have subtools, create a new tool
            [IPress,Tool:Cube3D]
            [IPress,Tool:SubTool:Insert]    // insert subtool directly selects it so we do not need to know its name to continue
            [IPress,PopUp:PolyMesh3D]
        ,
            [IPress,Tool:SubTool:Insert]    // insert subtool directly selects it so we do not need to know its name to continue
            [IPress,PopUp:PolyMesh3D]
        ]

        [If,[FileExists,objectPath],
            [FileNameSetNext,objectPath]
            [IPress,Tool:Import]
        ]     
        [RoutineCall, LoadTextures]
    ,        
        [Note,[StrMerge,"\nSubtool already exists: ",objectName," id: ", subtoolIndex],,timer]
        [SubToolSelect,[Val,subtoolIndex]]
        [If,[FileExists,objectPath],
            [FileNameSetNext,objectPath] [IPress,Tool:Import]
        ]
        [RoutineCall, LoadTextures]        
    ]   


    // show summary of what was imorted
    [If, debug == 1,
        [Note,
            "\n\nGoB import finished!",
            none, //Optional path1 of an interface item to be pointed out (default:none), 
            0, //Display Duration (in seconds) (0:wait for user action(default), -1:combine with next note command),
            0x164128, //Popup background color (0x000000<->0xffffff, default:0x606060, 0:No Background), 
            48, //Prefered distance of the note from the specified interface item (default:48), 
            600, //Prefered Note width (in pixels, default:400), 
            0x000000, //optional marked windows fill color (0x000000<->0xffffff or (blue+(green*256)+(red*65536))(Omitted value:No fill)),
            1, //Frame horizontal size (1:Max width (default)), 
            1, //Frame vertical size (1:Max height (default)), 
            0, //Frame left side (0:left (default), .5:center, 1:right) Omit value for horizontal autocentering, 
            0, //Frame top side ( 0:top (default), .5:center, 1:bottom )Omit value for vertical auto-centering, 
            "IMAGE_GMenuIcons/zscript.psd" //Optional icon file name
        ]
    ]
 
]/*End of ZScript*/

