/*
name: GoB_Import.zsc 
description: Zbrush script for Blender GoB addon
tracker_url: https://github.com/JoseConseco/GoB
author: Daniel Grauer
version: 1.0.0
*/

[VarDef,GoBImport,0]
[VarDef,timer,-1]
[VarDef,debug,1]
[VarDef,debugtimer,0]

[VarDef,GoBList(6),""] // NOTE: if list size changes gob export list size needs to be udpated as well
    /* File: Gob_variables.zvr
    0: object name, 1: fileExtension, 2: textureFormat,
    3: diffTexture, 4: normTexture, 5: dispTexture 
    */


[If,GoBImport==0, //make sure this runs when loaded

    [RoutineDef,AdjustPath,//replace backslashes with forward slashes
        [VarDef,pathStr,""]
        [Loop,999,
            [VarSet,in,[StrFind,[StrFromAsc,92],pathStr]]
            [If,[Val,in] > -1,//"
                [VarSet,pathStr,[StrMerge,[StrExtract,pathStr,0,[Val,in-1]],"/",[StrExtract,pathStr,[Val,in+1],[StrLength,pathStr]]]]
                ,
                [LoopExit]
            ]		
        ]
    ,pathStr]

    [RoutineDef,GetFullPath,	
        [VarSet,path,[FileNameResolvePath,path]]
        [If,[ZBrushInfo,6],//is MacOS
            //adjust for Mac OSX
            [VarSet,path,[StrExtract,path,2,256]]
        ]
    ,path]

    [VarSet,publicPath,[FileNameExtract,[FileNameResolvePath,"ZPUBLIC_ZPluginData/"],1]]
    [RoutineCall,AdjustPath,publicPath]//just as Notes don't display backslashes!
    [Note,[StrMerge, "\nThe ZBrush Data folder path is: \n    ", publicPath],,timer]

    [VarDef,gozPath,""]
    [VarDef, objectlistPath, ""]
	[If,[ZBrushInfo,6],//is MacOS
	 	[If,[StrFind,"Shared",publicPath]>-1,
		 	[VarSet,gozPath,[StrExtract,publicPath,0,([StrFind,"Shared",publicPath]+6)]]
		 	[VarSet,gozPath,[StrMerge,gozPath,"Pixologic/GoZProjects/Default/"]]

		 	[VarSet,objectlistPath,[StrExtract,publicPath,0,([StrFind,"Shared",publicPath]+6)]]
		 	[VarSet,objectlistPath,[StrMerge,objectlistPath,"Pixologic/GoZBrush/"]]

            [Note,[StrMerge, "\nThe GoZ Projects path is: \n    ", gozPath],,timer]
            [Note,[StrMerge, "\nThe GoZ objects list path is: \n    ", objectlistPath],,timer]
		 ]	 	
	 	//note that ZBrush paths on MacOS start with "!:"
	 	//this needs to be removed if passing paths to dynamic libraries etc. - see GetFullPath routine above
	 	,//else Windows
		 [If,[StrFind,"Documents",publicPath]>-1,
		 	[VarSet,gozPath,[StrExtract,publicPath,0,([StrFind,"Documents",publicPath]-1)]]
		 	[VarSet,gozPath,[StrMerge,gozPath,"Pixologic/GoZProjects/Default/"]]
		 	[RoutineCall,AdjustPath,gozPath]//just as Notes don't display backslashes!

		 	[VarSet,objectlistPath,[StrExtract,publicPath,0,([StrFind,"Documents",publicPath]-1)]]
		 	[VarSet,objectlistPath,[StrMerge,objectlistPath,"Pixologic/GoZBrush/"]]
		 	[RoutineCall,AdjustPath,objectlistPath]//just as Notes don't display backslashes!

            [Note,[StrMerge, "\nThe GoZ Projects path is: \n    ", gozPath],,timer]
            [Note,[StrMerge, "\nThe GoZ objects list path is: \n    ", objectlistPath],,timer]
		 ]
	]


    // load variables from GoB export
        /* File: Gob_variables.zvr
        0: object name, 1: fileExtension, 2: textureFormat,
        3: diffTexture, 4: normTexture, 5: dispTexture 
        */
    [VarDef,variablesFile,[StrMerge,gozPath,"GoB_variables.zvr"]]  


    [VarDef,diffSuffix, "_diff"]
    [VarDef,dispSuffix, "_disp"]
    [VarDef,normSuffix, "_norm"]

	[If,[FileExists,variablesFile],    
        [VarLoad,GoBList,variablesFile]

        //[VarSet,objectName,[StrMerge,GoBList(0),""]]
        //[Note,[StrMerge,objectName,"\n"],,timer]

        [VarSet,fileExtension,[StrMerge,GoBList(1),""]]
        //[Note,[StrMerge,fileExtension,"\n"],,timer]

        [VarSet,textureFormat,[StrMerge,GoBList(2),""]]
        //[Note,[StrMerge,textureFormat,"\n"],,timer]

        [VarSet,diffTexture,[StrMerge,GoBList(3),""]]
        //[Note,[StrMerge,diffTexture,"\n"],,timer]

        [VarSet,normTexture,[StrMerge,GoBList(4),""]]
        //[Note,[StrMerge,normTexture,"\n"],,timer]

        [VarSet,dispTexture,[StrMerge,GoBList(5),""]]  
        //[Note,[StrMerge,dispTexture,"\n"],,timer]          
    , 
        [Note,[StrMerge,"\n\nGoB_variables.zvr not Found", "\naborting import"],,timer]
        [Exit]
    ]
    
  

    //[IButton,ReadObjectList,"Read objects from GoZ_ObjectList.txt",
    [VarSet,objectlistFile,[StrMerge,objectlistPath,"GoZ_ObjectList.txt"]] 
    //[Note,[StrMerge, "\objectlistFile \n    ", objectlistFile],,timer] 

    [If,[FileExists,objectlistFile],
        //create memory block from the file
        [MemCreateFromFile,ZB_TextInputMem,objectlistFile]
    ]

    [VarSet,gOffset,0]
    [VarDef,lineStr,""]
    [VarDef,objectName,""]
    
    [If,[MemGetSize,ZB_TextInputMem],
        [Loop,10000,
            //read a line into a string variable
            [VarSet,lineBytes,[MemReadString,ZB_TextInputMem,lineStr,gOffset,1]]
            //extract objects string
            [VarSet,objectName,[StrExtract,lineStr,[StrLength,gozPath],lineBytes]]
            //[Note,[StrMerge, "\nobjectName \n    ", objectName],,timer]

            // call routine for import here   
            [VarSet,objectPath,[StrMerge,gozPath,objectName,fileExtension]]
            //[Note,[StrMerge, "\nobjectPath \n    ", objectPath],,timer]

            [VarDef,subtoolIndex, -1]// replace with subtool index if subtool already exists  

            [RoutineDef,FindSubtool,
                [VarDef,subtoolName,""]// Define a new variable to store the current subtool name 
                [VarSet,totalSubtools,[SubToolGetCount]]// create a variable to define the number of loop based on the subtools count
                [SubToolSelect,0]// select first subtool
                [VarSet,activeSubtool,[SubToolGetActiveIndex]]// create a variable with the current subtool Index

                [Loop,totalSubtools,//loop over subtools
                    [SubToolSelect,[Val,activeSubtool]]
                    [VarSet,subtoolName,[IGetTitle,"Tool:ItemInfo"]]//get the subtool name
                    [VarSet,subtoolName,[StrExtract,subtoolName,0,[StrLength,subtoolName]-2]]// trim chars from the end.
                    //[Note,[StrMerge,"Subtool Name: ",subtoolName, "\nTarget Object",  objectName],,timer]
                    [If,subtoolIndex == -1,
                        [If,([StrFind,subtoolName,objectName]==0) && ([StrLength,subtoolName]==[StrLength,objectName]),   // subtool not found,create a new one                 
                            [VarSet,subtoolIndex, activeSubtool]   
                            [LoopExit]
                            //[Note,[StrMerge,"subtool found: ",subtoolName, ", index: ",  subtoolIndex],,timer]
                        ]
                    ]        
                    //[Note, [StrMerge,activeSubtool, " activeSubtool: ",subtoolName],,timer]//displays message for 1 second
                    [VarInc, activeSubtool]//adds 1 to the loop counter
                ]
            ]


            [RoutineDef,LoadTextures,
                // import textures
                [If,[FileExists,diffTexture],
                    [IPress,Tool:Texture Map:TextureMap]
                    [FileNameSetNext,diffTexture] [IPress,Texture:Import]
                    [Note, [StrMerge, "\n   Load Texture: ", diffTexture],, timer]
                ]
                [If,[FileExists,dispTexture],
                    [IPress,Tool:Displacement Map:DisplacementMap]
                    [FileNameSetNext,dispTexture] [IPress,Alpha:Import]
                    [Note, [StrMerge, "\n   Load Texture: ", dispTexture],, timer]
                ]
                [If,[FileExists,normTexture],            
                    [IPress,Tool:Normal Map:Normal Map]
                    [FileNameSetNext,normTexture] [IPress,Texture:Import]
                    [Note, [StrMerge, "\n   Load Texture: ", normTexture],, timer]
                ]
            ]

            [RoutineCall,FindSubtool]


            [If,subtoolIndex == -1,    
                // subtool exists,update subtool 
                [Note,[StrMerge,"\n\nCreating new Subtool: ",objectName,"  id: ",subtoolIndex, " ", [ToolGetActiveIndex]," ", [ToolGetCount]] ,,timer] 
                
                [Note,[StrMerge,"\nToolGetSubToolID: ",[ToolGetSubToolID],""],,timer]
                [If,[ToolGetSubToolID] == 0, //tool cant have subtools, create a new tool

                    [IPress,Tool:Cube3D]
                    [IPress,Tool:SubTool:Insert]    // insert subtool directly selects it so we do not need to know its name to continue
                    [IPress,PopUp:PolyMesh3D]
                ,               
                    [IPress,Tool:SubTool:Insert]
                    [IPress,PopUp:PolyMesh3D]

                    /* 
                    //[Note,[StrMerge,"\n tool name: ",[ToolGetPath, [ToolGetActiveIndex]]],,0]
                    [If, [StrMerge,[ToolGetPath, [ToolGetActiveIndex]], ""] == "PolyMesh3D",   
                        [Note,[StrMerge,"\n tool name: ",[ToolGetPath, [ToolGetActiveIndex]]],,0]
                    ,           
                        [Note,[StrMerge,"\n not star: ",[ToolGetPath, [ToolGetActiveIndex]]],,0]
                    ] */
                ]

                [If,[FileExists,objectPath],
                    [FileNameSetNext,objectPath]
                    [IPress,Tool:Import]
                ]     
                [RoutineCall, LoadTextures]
            ,        
                [Note,[StrMerge,"\nSubtool already exists: ",objectName," id: ", subtoolIndex],,timer]
                [SubToolSelect,[Val,subtoolIndex]]
                [If,[FileExists,objectPath],
                    [FileNameSetNext,objectPath] [IPress,Tool:Import]
                ]
                [RoutineCall, LoadTextures]        
            ]   

            [VarSet,gOffset,gOffset+lineBytes]
            [If,gOffset >= [MemGetSize,ZB_TextInputMem],
                [LoopExit]
            ]
        ]
    ]        
    [MemDelete,ZB_TextInputMem] //all done, delete memblock
    //]


    // show summary of what was imorted
    [If, debug == 1,
        [Note,
            "\n\nGoB import finished!",
            none, //Optional path1 of an interface item to be pointed out (default:none), 
            debugtimer, //Display Duration (in seconds) (0:wait for user action(default), -1:combine with next note command),
            0x164128, //Popup background color (0x000000<->0xffffff, default:0x606060, 0:No Background), 
            48, //Prefered distance of the note from the specified interface item (default:48), 
            600, //Prefered Note width (in pixels, default:400), 
            0x000000, //optional marked windows fill color (0x000000<->0xffffff or (blue+(green*256)+(red*65536))(Omitted value:No fill)),
            1, //Frame horizontal size (1:Max width (default)), 
            1, //Frame vertical size (1:Max height (default)), 
            0, //Frame left side (0:left (default), .5:center, 1:right) Omit value for horizontal autocentering, 
            0, //Frame top side ( 0:top (default), .5:center, 1:bottom )Omit value for vertical auto-centering, 
            "IMAGE_GMenuIcons/zscript.psd" //Optional icon file name
        ]
    ]
 
]/*End of ZScript*/

